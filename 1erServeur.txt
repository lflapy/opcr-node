Cours OpenClassrooms : Des applications ultra-rapides avec Node.js
// que fait donc ce code ??

var http = require('http');
var server = http.createServer(function(req, res) {
  res.writeHead(200);
  res.end('<p><h1><strong>Salut tout le monde !</strong></h1></p>');
});
server.listen(8080);


// Il crée un mini-serveur web qui renvoie un message "Salut tout le monde" dans tous les cas,
// quelle que soit la page demandée. Ce serveur est lancé sur le port 8080 à la dernière ligne.
// Disséquons du code
// Décomposons le code :
// var http = require('http');   require effectue un appel à la bibliothèque.
// Ici, la bibliothèque 'http' qui nous permet de créer un serveur web.
// Il existe des tonnes de bibliothèque comme celle-là, la plupart pouvant être
// téléchargées avec NPM, le gestionnaire de paquets de Node.js (on apprendra à
// l'utiliser plus tard).
// La variable http représente un objet JavaScript qui va nous permettre de lancer
// un serveur web. C'est justement ce qu'on fait avec : var server = http.createServer();

// On appelle la fonction createServer() contenue dans l'objet http et on enregistre ce
// serveur dans la variable server.
// Vous remarquerez que la fonction createServer prend un paramètre...
// et que ce paramètre est une fonction ! C'est pour ça que l'instruction

// est un peu compliquée, puisqu'elle s'étend sur plusieurs lignes :

      // var server = http.createServer(function(req, res) {
      // res.writeHead(200);
      // res.end('Salut tout le monde !');
      // });

//  Tout le code ci-dessus correspond
// à l'appel à createServer(). Il comprend en paramètre la fonction
// à exécuter quand un visiteur se connecte à notre site.

// Retourner du code HTML
// Mais l'application est pour l'instant minimaliste :
// Le message renvoyé est du texte brut, il ne comporte même pas de HTML !
// L'application renvoie toujours le même message, quelle que soit la page appelée
// (http://localhost:8080, http://localhost:8080/mapage, http://localhost:8080/dossier/autrepage)
// Pour que ce chapitre soit complet, nous allons voir comment remédier à ces deux problèmes.
// Commençons ici par voir comment faire pour renvoyer du HTML.

// Comme je vous l'ai dit, il y a des règles à respecter entre le client et le serveur.
// Ils communiquent en se basant sur la norme HTTP inventée par Tim Berners-lee.
// Cette norme est à la base du Web(tout comme le langage HTML qui a aussi été inventé
// par le même monsieur)

// Que dit la norme HTTP ? Que le serveur doit indiquer le type de données qu'il s'apprète
// à envoyer au client. Eh oui ! un serveur peut renvoyer différents types de données.
//
// - Du texte brut : text/plain
// - Du HTML : text/html
// - Du CSS : text/css
// - Une image JPEG : image/jpeg
// - Une vidéo MPEG4 : video/mp4
// - Un fichier ZIP : application/zip
// - etc...

// Ce sont ce qu'on appelle les types MIME. Ils sont envoyés dans l'en-tête de la réponse du serveur.
// Vous vous souvenez comment on écrit dans l'en-tête de la réponse avec Node.js ?
// Nous avions écrit ceci :
            //   res.writeHead(200);

// Nous avions seulement indiqué le code de réponse 200 qui signifie "OK, pas d'erreur".
// Nous devons rajouter un paramètre qui indique le type MIME de la réponse.
// Pour HTML, ce sera donc :
            //   res.writeHead(200, {"Content-Type": "text/html"});

// Le second paramètre est entre accolades car on peut y envoyer plusieurs valeurs
// sous forme de tableau.
// Maintenant que c'est fait, nous pouvons renvoyer du HTML dans la réponse !
            //   res.end('<p>Voici un paragraphe <strong>HTML</strong> !</p>');

// Au final, notre code ressemble donc à ceci :
            // var http = require('http');
            //
            // var server = http.createServer(function(req, res) {
            // res.writeHead(200, {"Content-Type": "text/html"});
            // res.end('<p>Voici un paragraphe <strong>HTML</strong> !</p>');
            // });
            // server.listen(8080);

// Un paragraphe HTML renvoyé par notre application Node.js



Waaah !! Mais c'est atroce d'écrire du HTML comme ça ! (openclassrooms)
Node.js est bas niveau.
Je vous rassure, aucun développeur ne s'amusera vraiment à faire des pages web html
complexes comme ça là-dedans...
Il existe des moyens pour séparer le code HTML du code JavaScript :
  - ce sont les systèmes de Templates. C'est un peu hors sujet pour le moment,
  étant donné qu'on commence tout juste à découvrir les bases de Node.js. Mais si le
  sujet vous intéresse, sachez qu'il existe des tonnes de modules Node.js dédiés aux Templates.
  Le choix est immense !

DETERMINER LA PAGE APPELÉE ET LES PARAMÈTRES :

Nous savons renvoyer du code HTML, mais pour le moment notre application... renvoie toujours
la même chose ! Comment fait-on pour créer différentes pages avec Node.js ?
http://localhost:8080
http://localhost:8080/mapage
http://localhost:8080/dossier/autrepage...
Essayez notre petite application sur différents URLs. Quelle que soit la page appelée....
....la page affiche toujours la même chose.

Il faut que l'on sache quelle est la page demandé par l'utilisateur. Pour l'instant, vu
qu'on ne fait aucun test, notre application renvoie toujours la même chose.

Nous allons découvrir comment récupérer :
    - Le nom de la page demandée(/mapage,/page.html,/dossier/autrepage...)
    - Les paramètres qui circulent dans l'URL
    (ex: http://localhost:8080/mapage? nom=dupont&prenom=robert).

QUELLE EST LA PAGE DEMANDÉE PAR LE VISITEUR ?
POUR RÉCUPÉRER LA PAGE DEMANDÉE PAR LE VISITEUR, ON VA FAIRE APPLE À
UN NOUVEAU MODULE DE NODE APPELÉ "URL".
ON DEMANDE SON INCLUSION AVEC :
var url = require("url");
ENSUITE, IL NOUS SUFFIT DE "PARSER" LA REQUÊTE DU VISITEUR COMME CECI
POUR OBTENIR LE NOM DE LA PAGE DEMANDÉE :
url.parse(req.url).pathname;
Voir serveur3.js pour tester cela.

Serveur4.js  :  RENVOIE UN MESSAGE DIFFÉRENT EN FONCTION DE LA PAGE DEMANDÉE.
AVEC UN if : voir serveur4.js

QUELS SONT LES PARAMÈTRES ?
Les paramètres sont contenus dans la chaîne ?prenom=Robert&nom=Dupont.
Pour récupérer cette chaîne, il suffit de faire appel à :
url.parse(req.url).query
Le problème, c'est qu'on vous renvoie toute la chaîne sans découper
au préalable les différents paramètres.
Heureusement, il existe un module Node.js qui s'en charge pour nous :
querystring !

Incluez ce module :
var querystring = require('querystring');
Nous pouvons ensuite faire :
var params = querystring.parse(url.parse(req.url).query);

Vous disposez alors d'un tableau de paramètres "params". Pour récupérer le paramètre
"prenom" par exemple, il suffira d'écrire : params['prenom'].

Amusons-nous avec un code complet qui affiche votre prenom et votre nom (pourvu qu ceux-ci soient féfinis !)

Essayez d'aller sur http://localhost:8080?prenom=Robert&nom=Dupont pour voir, puis
changez le prénom et le nom pour les remplacer par les vôtres !

Deux petites précisions par rapport à ce code : 'prenom' in params me permet en JavaScript de tester
si le tableau contient bien une entrée 'prenom'. S'il manque un paramètre, je peux alors afficher`
un message d'erreur (sinon mon script aurait affichéundefinedà la place).
Par ailleurs, vous constaterez que je ne vérifie pas la page qui est appelée. Ce code fonctionne
aussi bien que l'on soit sur http://localhost:8080 ou sur http://localhost:8080/pageimaginaire.
Il faudrait combiner ce code et le précédent pour gérer à la fois la page ET les paramètres.

Schéma résumé

Allez, résumons ce qu'on vient d'apprendre dans un seul et unique schéma avant de terminer !


Récupérer l'URL et les paramètres avec Node.js
http:localhost:8080
/chemin/vers/la/page? url.parse(req.url).pathname
param1=valeur&param2=valeur url.parse(req.url).query






// ci-dessous code pour infos :
// <p class="alert alert-success">Bandeau d’alerte - la classe success</p>
// <p class="alert alert-info">Bandeau d’alerte - la classe info</p>
// <p class="alert alert-warning">Bandeau d’alerte - la classe warning</p>
// <p class="alert alert-danger">Bandeau d’alerte - la classe danger</p>
